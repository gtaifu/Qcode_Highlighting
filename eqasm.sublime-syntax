%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: eQASM
comment: eQASM Bundle by Xiang Fu (gtaifu@gmail.com)\
         verion 2.1,  2019-11-17
file_extensions:
  - qisa
  - eqasm
scope: source.eqasm

variables:
  cmp_flags:    '\b(?i:always|never|eq|ne|eqz|nez|lt|ltz|le|gt|ge|gez|ltu|leu|gtu|geu|carry|notcarry)\b'
  com_br:       '\b(?i:beq|bne|blt|ble|bgt|bge|bltu|bleu|bgtu|bgeu)\b'
  cinsn_no_arg: '\b(?i:nop|stop)\b'
  cinsn_reg_num: '\b(?i:mov|ldi|ldui)\b'
  cinsn_2_reg:  '\b(?i:shl1|copy|mult2|not|cmp)\b'
  cinsn_2reg_addr: '\b(?i:beq|bne|blt|ble|bgt|bge|bltu|bleu|bgtu|bgeu)\b'
  cinsn_3_reg:  '\b(?i:add|sub|addc|subc|and|or|xor|nand|nor|xnor)\b'
  delim:        '[ \t]'
  wsp:          '{{delim}}+'
  op_wsp:       '{{delim}}*'
  digit:        '[0-9]'
  alpha:        '[a-zA-Z]'
  alphanum:     '[a-zA-Z0-9]'
  number:       '[-]?{{digit}}*[.]?{{digit}}+'
  decimal:      '[-]?{{digit}}+'
  hex:          '0x[0-9a-fA-F]+'
  binary:       '0b[01]+'
  integer:      '0x[0-9a-f]+|0o[0-7]+|0b[01]+|[\d]+'
  string:       '\"[^\"]*\"'
  qreg:         '[qQ]{{digit}}+'
  rreg:         '[rR]{{digit}}+'
  sreg:         '[sS]{{digit}}+'
  treg:         '[tT]{{digit}}+'
  kw_def_sym:   '(?i:\.def_sym)'
  kw_register:  '(?i:\.register)'
  kw_smit:      '\b(?i:smit)\b'
  kw_smis:      '\b(?i:smis)\b'
  kw_qnop:      '\b(?i:qnop)\b'
  kw_fbr:       '\b(?i:fbr)\b'
  kw_br:        '\b(?i:br)\b'
  rreg_comma:   '({{rreg}}){{delim}}*,'
  kw_br_insn:   '\b(?i:goto|bra|brn)\b'
  identity:     '{{alpha}}[a-zA-Z0-9_]*'

contexts:
  prototype:
    - include: comments

  main:
    - include: empty_line
    - include: alias_def
    - include: labels
    - include: instruction_line

    - match: \(
      push: parenthesis
    - match: \{
      push: brace

    - include: unmatched_brackets

  unmatched_brackets:
    - match: \)
      scope: invalid.illegal.stray-bracket-end
    - match: \}
      scope: invalid.illegal.stray-bracket-end

  parenthesis:
    - match: \)
      pop: true
    - include: main

  brace:
    - match: \}
      pop: true
    - include: main

  comments:
    - match: '#'
      scope: punctuation.definition.comment.eqasm
      push:
        - meta_scope: comment.line.hash.eqasm
        - match: \n
          pop: true

  empty_line:
    - match: '^$\n'
      scope: empty_line.eqasm

  alias_def:
    - include: reg_alias
    - include: sym_alias

  labels:
    - match: '{{delim}}*{{identity}}{{delim}}*:'
      scope: markup.underline.link.eqasm

  reg_alias:
    - match: '{{delim}}*({{kw_register}}){{wsp}}({{rreg}}){{wsp}}({{identity}})'
      captures:
        1: markup.bold.eqasm # entity.name.function.eqasm
        2: entity.name.eqasm
        3: variable.parameter.eqasm

  sym_alias:
    - match: '{{delim}}*({{kw_def_sym}}){{wsp}}({{identity}}){{wsp}}({{integer}})'
      captures:
        1: markup.bold.eqasm
        2: variable.parameter.eqasm
        3: constant.numeric.integer.eqasm

  instruction_line:
    - meta_scope: instructin.eqasm
    - include: single_format
    - include: vliw_format

  single_format:
    - include: classical_instructions
    - include: quantum_single_format

  classical_instructions:
    - match: '({{cinsn_no_arg}}){{delim}}*'
      scope: keyword.control.eqasm

    - include: branch_instructions
    - include: arith_logic_instructions

  branch_instructions:
    - match: '({{kw_br_insn}}){{wsp}}({{identity}}){{delim}}*$'
      captures:
        1: keyword.control.eqasm
        2: markup.underline.link.eqasm

    - match: '({{kw_fbr}}){{wsp}}({{cmp_flags}})({{wsp}}|,{{delim}}*)'
      captures:
        1: keyword.control.eqasm
        2: markup.bold.cmp_flags.eqasm
      push: rreg_last

    - match: '({{kw_br}}){{wsp}}({{cmp_flags}}){{op_wsp}},{{op_wsp}}({{identity}})'
      captures:
        1: keyword.control.eqasm
        2: markup.bold.cmp_flags.eqasm
        3: markup.underline.link.eqasm

    - match: '(?i:{{op_wsp}}(fmr){{wsp}})'
      captures:
        1: keyword.control.eqasm
      push: rreg_qreg

    - match: '({{cinsn_2reg_addr}}){{wsp}}'
      captures:
        1: keyword.control.eqasm
      push: rreg_rreg_addr

  rreg_rreg_addr:
    - match: '({{rreg}}){{op_wsp}},{{op_wsp}}'
      captures:
        1: entity.name.eqasm
      set: rreg_addr
    - match: \b\w+{{op_wsp}},{{op_wsp}}
      scope: string.unquoted.eqasm
      set: rreg_addr

  rreg_addr:
    - match: '({{rreg}}){{op_wsp}},{{op_wsp}}({{identity}}){{op_wsp}}'
      captures:
        1: entity.name.eqasm
        2: markup.underline.link.eqasm
      pop: true

  arith_logic_instructions:
    - match: '({{cinsn_reg_num}}){{wsp}}'
      captures:
        1: keyword.control.eqasm
      push: rreg_num

    - match: '({{cinsn_2_reg}}){{wsp}}'
      captures:
        1: keyword.control.eqasm
      push: double_rreg

    - match: '({{cinsn_3_reg}}){{wsp}}'
      captures:
        1: keyword.control.eqasm
      push: triple_rreg

  rreg_num:
    - match: '(?i:\b({{rreg}}){{op_wsp}},{{op_wsp}})'
      captures:
        1: entity.name.eqasm
      set: constants_numeric_last
    - match: \b\w+{{op_wsp}},{{op_wsp}}
      scope: string.unquoted.eqasm
      set: constants_numeric_last

  constants_numeric_last:
    - match: '{{integer}}'
      scope: constant.numeric.integer.eqasm
      pop: true
    - match: '\b\w+\b'
      scope: variable.parameter.eqasm
      pop: true
    # - include: ignored_content

  triple_rreg:
    - match: '{{rreg_comma}}'
      captures:
        1: entity.name.eqasm
      set: double_rreg
    - match: '\b\w+{{delim}}*,'
      scope: variable.parameter.eqasm
      set: double_rreg

  double_rreg:
    - match: '{{rreg_comma}}'
      captures:
        1: entity.name.eqasm
      set: rreg_last
    - match: \b\w+{{delim}}*,{{delim}}*
      scope: string.unquoted.eqasm
      set: rreg_last

  rreg_last:
    - match: '({{rreg}})'
      captures:
        1: entity.name.eqasm
      pop: true
    - match: \b\w+\b
      scope: variable.parameter.eqasm
      pop: true
    # - include: ignored_content

  rreg_qreg:
    - match: '\b({{rreg}}){{op_wsp}},{{op_wsp}}'
      captures:
        1: entity.name.eqasm
      set: qreg_last
    - match: \b\w+{{op_wsp}},{{op_wsp}}
      scope: string.unquoted.eqasm
      set: qreg_last

  qreg_last:
    - match: '{{qreg}}'
      scope: variable.parameter.eqasm
      pop: true
    - match: \b\w+\b
      scope: string.unquoted.eqasm
      pop: true


  quantum_single_format:
    - match: '({{kw_smis}}){{wsp}}({{sreg}}){{op_wsp}},'
      captures:
        1: keyword.control.eqasm
        2: entity.name.function.eqasm
      push: sreg_content

    - match: '({{kw_smit}}){{wsp}}({{treg}}){{op_wsp}},'
      captures:
        1: keyword.control.eqasm
        2: entity.name.function.eqasm
      push: treg_content

    - match: '(?i:(qwait){{wsp}}({{integer}}))'
      captures:
        1: string.unquoted.eqasm
        2: constant.numeric.integer.eqasm

    - match: '(?i:(qwait){{wsp}}({{string}}))'
      captures:
        1: string.unquoted.eqasm
        2: constant.numeric.integer.eqasm

    - match: '(?i:(qwaitr){{wsp}}({{rreg}}))'
      captures:
        1: string.unquoted.eqasm
        2: entity.name.eqasm

  sreg_content:
    # qubit number list
    - match: '\{'
      scope: punctuation.separator.bracket.eqasm
      set: single_qubit_list

    # integer represented mask
    - match: '({{integer}}){{op_wsp}}$'
      scope: constant.numeric.integer.eqasm
      pop: true

    # - include: ignored_content

  single_qubit_list:
    - meta_scope: single_qubit_list.eqasm
    - match: '({{integer}})'
      scope: constant.numeric.integer.eqasm
    - match: ','
      push: single_qubit_number
    - match: '\}'
      scope: punctuation.separator.bracket.eqasm
      pop: true
    # - include: ignored_content

  single_qubit_number:
    - match: '({{integer}})'
      scope: constant.numeric.integer.eqasm
      pop: true
    - match: '\w'
      scope: variable.parameter.eqasm
      pop: true

  treg_content:
    - match: '\{'
      scope: punctuation.separator.bracket.eqasm
      set: two_qubit_list

    # integer represented mask
    - match: '(?i:({{integer}}))'
      scope: constant.numeric.integer.eqasm
      pop: true
    - match: \n
      pop: true

  two_qubit_list:
    - meta_scope: two_qubit_list.eqasm
    - match: '{{op_wsp}}\({{op_wsp}}({{integer}}){{op_wsp}},{{op_wsp}}({{integer}}){{op_wsp}}\){{op_wsp}}'
      captures:
        1: constant.numeric.integer.eqasm
        2: constant.numeric.integer.eqasm
    - match: ','
      push: two_qubit_pair
    - match: '\}'
      scope: punctuation.separator.bracket.eqasm
      pop: true
    # - include: ignored_content

  two_qubit_pair:
    - match: '{{op_wsp}}\({{op_wsp}}({{integer}}){{op_wsp}},{{op_wsp}}({{integer}}){{op_wsp}}\){{op_wsp}}'
      captures:
        1: constant.numeric.integer.eqasm
        2: constant.numeric.integer.eqasm
      pop: true
    - match: '.*'
      scope: invalid.illegal.qubitnumber.eqasm
      pop: true


  vliw_format:
    - meta_scope: vliw_format.eqasm
    - match: '(bs{{wsp}})?([0-7]?){{wsp}}({{kw_qnop}})'
      captures:
        1: comment.line.bs.eqasm
        2: constant.numeric.preinterval.eqasm
        3: string.unquoted.eqasm
      push: next_vliw_insn
    - match: '(bs{{wsp}})?([0-7]{{wsp}})?([Cc],{{wsp}})?({{identity}}){{wsp}}({{sreg}}|{{treg}})'
      captures:
        1: comment.line.bs.eqasm
        2: constant.numeric.preinterval.eqasm
        3: string.unquoted.eqasm
        4: string.unquoted.eqasm
        5: entity.name.function.eqasm
      push: next_vliw_insn

  next_vliw_insn:
    - match: '\|{{op_wsp}}({{kw_qnop}})'
      captures:
        1: string.unquoted.eqasm
      set: next_vliw_insn
    - match: '\|{{op_wsp}}(([Cc],)*{{identity}}){{wsp}}({{sreg}}|{{treg}})'
      captures:
        1: string.unquoted.eqasm
        2: comment.control.binary.eqasm
        3: entity.name.function.eqasm
      set: next_vliw_insn
    - match: \n
      pop: true
