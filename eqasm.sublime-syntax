%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: eQASM
comment: eQASM Bundle by Xiang Fu (gtaifu@gmail.com)\
         verion 2.0,  2019-11-14
file_extensions:
  - qisa
  - eqasm
scope: source.eqasm

variables:
  cmp_flags: '(?i:always|never|eq|ne|eqz|nez|lt|ltz|le|gt|ge|gez|ltu|leu|gtu|geu|carry|notcarry)'
  delim:    '[ \t]'
  whitesp:  '{{delim}}+'
  digit:    '[0-9]'
  alpha:    '[a-zA-Z]'
  alphanum: '[a-zA-Z0-9]'
  number:   '[-]?{{digit}}*[.]?{{digit}}+'
  decimal:  '[-]?{{digit}}+'
  hex:      '0x[0-9a-fA-F]+'
  binary:   '0b[01]+'
  integer: '0x[0-9a-f]+|0o[0-7]+|0b[01]+|[\d]+'
  string:   '\"[^\"]*\"'
  qreg:    '[qQ]{{digit}}+'
  rreg:    '[rR]{{digit}}+'
  sreg:    '[sS]{{digit}}+'
  treg:    '[tT]{{digit}}+'
  comment:  '#[^\n]*'
  identity: '{{alpha}}[a-zA-Z0-9_]*'

contexts:
  main:
    - include: empty_line
    - include: alias_def
    - include: labels
    - include: instruction_line

    - match: \(
      push: parenthesis
    - match: \{
      push: brace

    - include: unmatched_brackets

  prototype:
    - include: comments

  empty_line:
    - match: '\s+'

  labels:
    - match: '\s*{{identity}}\s*:'
      scope: markup.underline.link.eqasm

  alias_def:
    - include: reg_alias
    - include: sym_alias

  reg_alias:
    - match: '(?i:(\.register)\s+({{rreg}})\s+({{identity}}))'
      captures:
        1: markup.bold.eqasm # entity.name.function.eqasm
        2: entity.name.eqasm
        3: variable.parameter.eqasm

  sym_alias:
    - match: '(?i:\s*(\.def_sym)\s+({{identity}})\s+({{integer}}))'
      captures:
        1: markup.bold.eqasm
        2: variable.parameter.eqasm
        3: constant.numeric.integer.eqasm

  instruction_line:
    - include: single_format
    - include: vliw_format

  single_format:
    - include: classical_instructions
    - include: quantum_single_format

  vliw_format:
    - match: '(?i:\s*(bs)\s+([0-7]?))'
      captures:
        1: comment.line.bs.eqasm
        2: constant.numeric.preinterval.eqasm
      push: next_vliw_insn
    - match: '(?i:^\s*([0-7]?))'
      captures:
        1: constant.numeric.preinterval.eqasm
      push: next_vliw_insn
    - match: '\|'
      scope: punctuation.separator.eqasm
      push: next_vliw_insn
    - include: next_vliw_insn
    - match: '^\s*\|'
      scope: invalid.illegal.verticalbar.eqasm

  next_vliw_insn:
    - match: '(?i:\s*qnop)'
      scope: string.unquoted.eqasm
      pop: true
    - match: '(?i:[\s]*((c,)*{{identity}})\s+({{sreg}}|{{treg}}))'
      captures:
        1: string.unquoted.eqasm
        2: comment.control.binary.eqasm
        3: entity.name.function.eqasm
      pop: true


  classical_instructions:
    - match: '(?i:^\s*nop|stop\s*$)'
      scope: keyword.control.eqasm

    - include: branch_instructions
    - include: arith_logic_instructions

  branch_instructions:
    - match: '(?i:\s*(goto|bra|brn)\s+({{identity}})\s*$)'
      captures:
        1: keyword.control.eqasm
        2: markup.underline.link.eqasm

    - match: '(?i:\s*(fbr)\s+({{cmp_flags}})(\s+|,\s*))'
      captures:
        1: keyword.control.eqasm
        2: markup.bold.cmp_flags.eqasm
      push: rreg_last

    - match: '(?i:^\s*(br)\s+({{cmp_flags}})\s*,\s*({{identity}})\s*)'
      captures:
        1: keyword.control.eqasm
        2: markup.bold.cmp_flags.eqasm
        3: markup.underline.link.eqasm

    - match: '(?i:\s*(fmr)\s+)'
      captures:
        1: keyword.control.eqasm
      push: rreg_qreg

    - match: '(?i:^\s*(beq|bne|blt|ble|bgt|bge|bltu|bleu|bgtu|bgeu)\s+)'
      captures:
        1: keyword.control.eqasm
      push: rreg_rreg_addr

  rreg_rreg_addr:
    - match: '(?i:\b({{rreg}})\s*,\s*)'
      captures:
        1: entity.name.eqasm
      set: rreg_addr
    - match: \b\w+\s*,\s*
      scope: string.unquoted.eqasm
      set: rreg_addr
    - include: ignored_content

  rreg_addr:
    - match: '(?i:\b({{rreg}})\s*,\s*({{identity}})\s*)'
      captures:
        1: entity.name.eqasm
        2: markup.underline.link.eqasm
      pop: true
    - include: ignored_content

  arith_logic_instructions:
    - match: '(?i:^\s*(mov|ldi|ldui)\s+)'
      captures:
        1: keyword.control.eqasm
      push: r_reg_to_num_r

    - match: '(?i:^\s*(shl1|copy|mult2|not|cmp)\s+)'
      scope: keyword.control.eqasm
      push: rreg_penultimate

    - match: '(?i:^\s*(add|sub|addc|subc|and|or|xor|nand|nor|xnor)\s+)'
      scope: keyword.control.eqasm
      push: rreg_antepenultimate

  rreg_antepenultimate:
    - match: '(?i:\b({{rreg}})\s*,\s*)'
      captures:
        1: entity.name.eqasm
      set: rreg_penultimate
    - match: \b\w+\s*,\s*
      scope: variable.parameter.eqasm
      set: rreg_penultimate
    - include: ignored_content

  rreg_penultimate:
    - match: '(?i:\b({{rreg}})\s*,\s*)'
      captures:
        1: entity.name.eqasm
      set: rreg_last
    - match: \b\w+\s*,\s*
      scope: string.unquoted.eqasm
      set: rreg_last
    - include: ignored_content

  rreg_qreg:
    - match: '(?i:\b({{rreg}})\s*,\s*)'
      captures:
        1: entity.name.eqasm
      set: qreg_last
    - match: \b\w+\s*,\s*
      scope: string.unquoted.eqasm
      set: qreg_last
    - include: ignored_content

  r_reg_to_num_r:
    - match: '(?i:\b({{rreg}})\s*,\s*)'
      captures:
        1: entity.name.eqasm
      set: constants_numeric_last
    - match: \b\w+\s*,\s*
      scope: string.unquoted.eqasm
      set: constants_numeric_last
    - include: ignored_content

  rreg_last:
    - match: '(?i:\b({{rreg}})\b)'
      captures:
        1: entity.name.eqasm
      pop: true
    - match: \b\w+\b
      scope: variable.parameter.eqasm
      pop: true
    - include: ignored_content

  qreg_last:
    - match: '(?i:\b{{qreg}}\b)'
      scope: variable.parameter.eqasm
      pop: true
    - match: \b\w+\b
      scope: string.unquoted.eqasm
      pop: true
    - include: ignored_content

  quantum_single_format:
    - match: '(?i:^\s*(smis)\s+({{sreg}})(\s+|,\s*))'
      captures:
        1: keyword.control.eqasm
        2: entity.name.function.eqasm
      push: sreg_content

    - match: '(?i:^\s*(smit)\s+({{treg}})(\s+|,\s*))'
      captures:
        1: keyword.control.eqasm
        2: entity.name.function.eqasm
      push: treg_content

    - match: '(?i:^\s*(qwait)\s+({{integer}})\s*)'
      captures:
        1: string.unquoted.eqasm
        2: constant.numeric.integer.eqasm

    - match: '(?i:^\s*(qwait)\s+({{string}})\s*)'
      captures:
        1: string.unquoted.eqasm
        2: constant.numeric.integer.eqasm

    - match: '(?i:^\s*(qwaitr)\s+({{rreg}})\s*)'
      captures:
        1: string.unquoted.eqasm
        2: entity.name.eqasm

  sreg_content:
    # qubit number list
    - match: '\{'
      scope: punctuation.separator.bracket.eqasm
      set: single_qubit_list

    # integer represented mask
    - match: '(?i:({{integer}})\s*$)'
      scope: constant.numeric.integer.eqasm
      pop: true

    - include: ignored_content

  single_qubit_list:
    - match: '\s*({{integer}})\s*'
      scope: constant.numeric.integer.eqasm
    - match: ','
      push: single_qubit_number
    - match: '\}'
      scope: punctuation.separator.bracket.eqasm
      pop: true
    - include: ignored_content

  single_qubit_number:
    - match: '\s*({{integer}})\s*'
      scope: constant.numeric.integer.eqasm
      pop: true
    - match: '.*'
      scope: invalid.illegal.qubitnumber.eqasm
      pop: true

  treg_content:
    # qubit pair list
    - match: '\{'
      scope: punctuation.separator.bracket.eqasm
      set: two_qubit_list

    # integer represented mask
    - match: '(?i:({{integer}})\s*$)'
      scope: constant.numeric.integer.eqasm
      pop: true



  two_qubit_list:
    - match: '\s*\(\s*({{integer}})\s*,\s*({{integer}})\s*\)\s*'
      captures:
        1: constant.numeric.integer.eqasm
        2: constant.numeric.integer.eqasm
    - match: ','
      push: two_qubit_pair
    - match: '\}'
      scope: punctuation.separator.bracket.eqasm
      pop: true
    - include: ignored_content

  two_qubit_pair:
    - match: '\s*\(\s*({{integer}})\s*,\s*({{integer}})\s*\)\s*'
      captures:
        1: constant.numeric.integer.eqasm
        2: constant.numeric.integer.eqasm
      pop: true
    - match: '.*'
      scope: invalid.illegal.qubitnumber.eqasm
      pop: true

  parenthesis:
    - match: \)
      pop: true
    - include: main

  brace:
    - match: \}
      pop: true
    - include: main

  comments:
    # - match: '#.*$\n?'
    #   scope: comment.line.hash.eqasm
    # # Comments begin with a '#' and finish at the end of the line.
    - match: '#'
      scope: punctuation.definition.comment.eqasm
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.hash.eqasm
        - match: $\n?
          pop: true

  constants_numeric_last:
    - match: '{{integer}}'
      scope: constant.numeric.integer.eqasm
      pop: true
    - match: '\b\w+\b'
      # scope: string.unquoted.eqasm
      scope: variable.parameter.eqasm
      pop: true
    - include: ignored_content

  unmatched_brackets:
    - match: \)
      scope: invalid.illegal.stray-bracket-end
    - match: \}
      scope: invalid.illegal.stray-bracket-end

  ignored_content:
    - match: '.*'
      scope: invalid.illegal.content.eqasm
